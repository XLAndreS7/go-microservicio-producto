name: Build, Test, and Push Docker Image for producto-service

on:
  push:
    branches:
      - main

permissions:
  security-events: write
  contents: read

jobs:
  build-test-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22.3

      - name: Verify Go version
        run: go version

      - name: Run unit tests
        run: go test -v ./... -short

      - name: Update golang.org/x/crypto to v0.35.0
        run: |
          go get golang.org/x/crypto@v0.35.0
          go mod tidy

      - name: Commit updated go.mod and go.sum
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add go.mod go.sum
          git commit -m "chore: update golang.org/x/crypto to fix vulnerabilities" || echo "No changes to commit"
          git push origin main || echo "No changes to push"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract version
        id: vars
        run: |
          VERSION=1.0.$(date +%Y%m%d%H%M%S)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Version is $VERSION"

      - name: Build Docker image
        run: |
          docker build \
            -t xlandres/producto-service:latest \
            -t xlandres/producto-service:${{ env.VERSION }} \
            .

      - name: Run integration tests (if exists)
        run: |
          if [ -d "./tests/integration" ]; then
            go test -v ./tests/integration
          else
            echo "No integration tests found, skipping..."
          fi

      - name: Run coverage
        run: |
          go test -coverprofile=coverage.out ./...
          go tool cover -func=coverage.out

      - name: Scan image with Trivy (table format)
        uses: aquasecurity/trivy-action@0.11.2
        with:
          image-ref: xlandres/producto-service:latest
          format: table
          exit-code: 1
          ignore-unfixed: true
          vuln-type: os,library

      - name: Scan image with Trivy (SARIF format)
        uses: aquasecurity/trivy-action@0.11.2
        with:
          image-ref: xlandres/producto-service:latest
          format: sarif
          output: trivy-results.sarif
          ignore-unfixed: true
          vuln-type: os,library

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: go

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          output: codeql-results.sarif

      - name: Upload SARIF report to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: codeql-results.sarif

      - name: Push Docker image
        if: success()
        run: |
          docker push xlandres/producto-service:latest
          docker push xlandres/producto-service:${{ env.VERSION }}





